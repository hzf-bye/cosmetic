log4j.rootLogger=debug, stdout, logRollingFile, logDailyFile
#设置日志输出编码方式为UTF-8，如果不指定，会以当前运行操作系统的编码方式记录
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#输出目的Appender的日志级别，Appender的级别设置要优先于logger的
#级别设置，即先使用Appender的，而不管logger的日志级别是怎样设置的
log4j.appender.stdout.Threshold=debug
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.encoding=UTF-8
log4j.appender.stdout.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c]-[%p] %m%n

###### File Logger ###############
#开发时，使用DEBUG，发布时最好修改成INFO，如果未设置级别，则使用
#父日志记录器的，设置了就使用logger的，不管父日志怎样设置
#log4j.logger.com.mypakge=DEBUG,D
#开发时设为true，表示需要屏幕输出，发布时这里最好设置为false，表示不继承父日志记录器的Appender
#log4j.additivity.com.mypakge=true
#设定文件大小输出到文件并且文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.logRollingFile=org.apache.log4j.RollingFileAppender
#设置日志输出编码方式为UTF-8，如果不指定，会以当前运行操作系统的编码方式记录，这样在有的Linux上会出面乱码
log4j.appender.logRollingFile.encoding=UTF-8
#${LOGS_PATH}为JVM环境变量，我们可以在运行里给JVM加上该参数 -DLOGS_PATH=e:/tmp/log
log4j.appender.logRollingFile.File=/Users/user02/cosmetic/system.log
#后缀可以是KB,MB,GB.在日志文件到达该大小时,将会自动滚动.如:log4j.log.1
log4j.appender.logRollingFile.MaxFileSize=10MB
#指定可以产生的滚动文件的最大数
log4j.appender.logRollingFile.MaxBackupIndex=10
#文件采用追加方式
log4j.appender.logRollingFile.Append=true
log4j.appender.logRollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.logRollingFile.layout.ConversionPattern=[%d{yyy-MM-dd HH:mm:ss.SSS}] [%p] [%t] [%c] [%l] - [%m]%n

#指定日志消息的输出最低层次,这儿设设置的日志级别只能大于等于log4j.rootLogger才能起作用，例log4j.rootLogger设置级别为info,这里设置debug是无法显示出debug级别日志的
log4j.appender.logRollingFile.Threshold = info 
#默认值是true,所有的消息都会被立即输出
log4j.appender.logRollingFile.ImmediateFlush = TRUE 



